p <- ggplot(mtcars, aes(wt, disp)) + geom_point()#
p + facet_wrap(ggplot::vars(vs, am))
p <- ggplot(mtcars, aes(wt, disp)) + geom_point()#
p + facet_wrap(vars(vs, am))
p <- ggplot(mtcars, aes(wt, disp)) + geom_point()#
p + facet_wrap(vars(vs))
install.packages("ggplot3")
install.packages("ggplot2")
require(ggplot2)
no applicable method for 'as.quoted' applied to an object of class "function"
p <- ggplot(mtcars, aes(wt, disp)) + geom_point()#
p + facet_wrap(vars(vs, am))
diamond_plot <- function (data, group, metric) {#
        quo_group <- sym(group)#
        quo_metric <- sym(metric)#
        summary <- data %>%#
                group_by(!!quo_group) %>%#
                summarise(mean=mean(!!quo_metric))#
                ggplot(summary, aes_string(x = group, y= "mean")) +#
                geom_bar(stat='identity')#
}#
diamond_plot(diamonds, "clarity", "price")
g1 <- ggplot(data=data_long, mapping = aes(x = model, y = value, group = time, color = time)) +#
    geom_line() + geom_point() + facet_wrap(test~time, nrow=4, ncol=4, scales = "free_y") + #
    labs(y = "Marginal") +#
    theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))
g1
data_long
g1 <- ggplot(data=data_long, mapping = aes(x = model, y = value, group = time, color = time)) +#
    geom_line() + geom_point() + facet_grid(test~time, nrow=4, ncol=4, scales = "free_y") + #
    labs(y = "Marginal") +#
    theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))
g1 <- ggplot(data=data_long, mapping = aes(x = model, y = value, group = time, color = time)) +#
    geom_line() + geom_point() + facet_grid(test~time) + ##, nrow=4, ncol=4, scales = "free_y"#
    labs(y = "Marginal") +#
    theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))
g1
ggplot(data=data_long, mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point()
ggplot(data=data_long, mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_grid(test~time)
ggplot(data=data_long) +geom_line() + geom_point() + facet_grid(test~time)
ggplot(data=data_long, mapping = aes(x = model, y = value)) +geom_line() + geom_point() + facet_grid(test~time)
data_long
sp <- ggplot(data_long, aes(x=model, y=value)) + geom_point(shape=1)
sp
sp + facet_grid(test ~ .)
sp + facet_grid(test ~ ., scales="free_y")
sp + facet_grid(test ~ time, scales="free_y")
sp + facet_grid(test ~ model, scales="free_y")
sp <- ggplot(data_long, aes(x=time, y=value)) + geom_point(shape=1)#
sp + facet_grid(test ~ model, scales="free_y")
data_long
test.curve
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)
data_long
g1 <- ggplot(data=data_long, mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_grid(test~time, scales = "free_y")#
    labs(y = "Marginal") +#
    theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data=data_long, mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line(scales = "free_y") + geom_point(scales = "free_y") + facet_grid(test~time, scales = "free_y")#
    labs(y = "Marginal") +#
    theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data=data_long, mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, scales = "free_y")#
    labs(y = "Marginal") +#
    theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, scales = "free_y")#
    labs(y = "Marginal") +#
    theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y")#
    labs(y = "Marginal") +#
    theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "Marginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)
multiplot(g1, g2, g3, g4, cols=4)
multiplot(g1, g2, g3, g4, cols=1)
require(NetworkChange)#
pdf(file="split.pdf", width=10, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
getwd()
pdf(file="split.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
load("/Users/park/Dropbox/MultilayerNetwork/Journal/BayesianAnalysis/Replication/LossSimulation/merge_loss.RData")
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="merge.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
loss.out
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="merge.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
load("/Users/park/Dropbox/MultilayerNetwork/Journal/BayesianAnalysis/Replication/LossSimulation/split_loss.RData")
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="split.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
load("/Users/park/Dropbox/MultilayerNetwork/Journal/BayesianAnalysis/Replication/LossSimulation/merge-split_loss.RData")
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="merge-split.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
load("/Users/park/Dropbox/MultilayerNetwork/Journal/BayesianAnalysis/Replication/LossSimulation/split-merge_loss.RData")
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="split-merge.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
colnames(test.curve)[3] <- paste0(colnames(test.curve)[3], " (truth)")#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="split-merge.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)
data_long
data_long %>%#
     mutate(model=replace(model=="break2", "break2 (true)")) %>%#
     as.data.frame()
data_long %>%#
     mutate(model=replace(model==break2, "break2 (true)")) %>%#
     as.data.frame()
data_long %>%#
     mutate(model=replace(model, model==break2, "break2 (true)")) %>%#
     as.data.frame()
data_long %>%#
     mutate(model=replace(model, model=="break2", "break2 (true)")) %>%#
     as.data.frame()
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "break 2 (truth)", y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "break 2 (truth)", y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "break 2 (truth)", y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(x = "break 2 (truth)", y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="split-merge.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground True = break2", y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground True = break2", y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground True = break2", y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(x = "Ground True = break2", y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="split-merge.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(x = "Ground Truth = break2", y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="split-merge.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
load("/Users/park/Dropbox/MultilayerNetwork/Journal/BayesianAnalysis/Replication/LossSimulation/split_loss.RData")
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(x = "Ground Truth = break2", y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="split.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
load("/Users/park/Dropbox/MultilayerNetwork/Journal/BayesianAnalysis/Replication/LossSimulation/merge_loss.RData")
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(x = "Ground Truth = break2", y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="merge.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
load("/Users/park/Dropbox/MultilayerNetwork/Journal/BayesianAnalysis/Replication/LossSimulation/split-merge_loss.RData")
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(x = "Ground Truth = break2", y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="split-merge.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
load("/Users/park/Dropbox/MultilayerNetwork/Journal/BayesianAnalysis/Replication/LossSimulation/merge-split_loss.RData")
library(tidyr)#
test.curve1 <- t(sapply(1:4, function(j){simulation.result[[j]][[1]]}))#
test.curve2 <- t(sapply(1:4, function(j){simulation.result[[j]][[2]]}))#
test.curve3 <- t(sapply(1:4, function(j){simulation.result[[j]][[3]]}))#
test.curve4 <- t(sapply(1:4, function(j){simulation.result[[j]][[4]]}))#
#
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
test.curve <- data.frame(test.curve)#
colnames(test.curve) <- paste0("break", 0:3)#
test.curve$test <- rep(c("LogMarginal", "Loglike", "WAIC","Loss"), each = 4)#
test.curve$time <- rep(as.factor(time.list), 4)#
data_long <- gather(test.curve, model, value, #
                    break0, break1, break2, break3, factor_key=TRUE)#
#
g1 <- ggplot(data=subset(data_long, test=="LogMarginal"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "LogMarginal") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g2 <- ggplot(data=subset(data_long, test=="Loglike"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "Loglike") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g3 <- ggplot(data=subset(data_long, test=="WAIC"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4,scales = "free_y") + #
    labs(x = "Ground Truth = break2", y = "WAIC") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
g4 <- ggplot(data=subset(data_long, test=="Loss"), mapping = aes(x = model, y = value, group = test, color = time)) +#
    geom_line() + geom_point() + facet_wrap(~time, nrow=1, ncol=4) + #
    labs(x = "Ground Truth = break2", y = "Loss") + theme_bw() +#
    theme(legend.key = element_blank(),#
          plot.title = element_text(hjust = 0.5))#
require(NetworkChange)#
pdf(file="merge-split.pdf", family="sans", width=12, height=10)#
multiplot(g1, g2, g3, g4, cols=1)#
dev.off()
break.out <- as.list(rep(NA, break.upper))
break.upper=3
break.out <- as.list(rep(NA, break.upper))
break.out
break0 <- 1
c(break0, break.out)
set.seed(11173)#
    Y <- MakeBlockNetworkChange(n=nodesize, break.point = .5,#
                                base.prob=.05, block.prob=.5,#
                                shape=shape, T=time,#
                                type ="split")
dim(Y_)
dim(Y)
v0
v0=NULL
v1=NULL
## set.seed(11173)#
    K <- dim(Y)#
    ## prior estimate#
    if(is.null(v0) || is.null(v1)){#
        test.run <- NetworkStatic(Y=Y, R=R, mcmc=100, burnin=100, verbose=100, UL.Normal = UL.Normal,#
                                  v0=10, v1=K[[3]]*2)#
        V <- attr(test.run, "V")#
        sigma.mu = mean(apply(V, 2, mean))#
        sigma.var = 10*mean(apply(V, 2, var))#
        if(is.null(v0)) v0 <- 4 + 2 * (sigma.mu^2/sigma.var)#
        if(is.null(v1)) v1 <- 2 * sigma.mu * (v0/2 - 1)#
    }
R=2
## set.seed(11173)#
    K <- dim(Y)#
    ## prior estimate#
    if(is.null(v0) || is.null(v1)){#
        test.run <- NetworkStatic(Y=Y, R=R, mcmc=100, burnin=100, verbose=100, UL.Normal = UL.Normal,#
                                  v0=10, v1=K[[3]]*2)#
        V <- attr(test.run, "V")#
        sigma.mu = mean(apply(V, 2, mean))#
        sigma.var = 10*mean(apply(V, 2, var))#
        if(is.null(v0)) v0 <- 4 + 2 * (sigma.mu^2/sigma.var)#
        if(is.null(v1)) v1 <- 2 * sigma.mu * (v0/2 - 1)#
    }
UL.Normal="Orthogonal"
## set.seed(11173)#
    K <- dim(Y)#
    ## prior estimate#
    if(is.null(v0) || is.null(v1)){#
        test.run <- NetworkStatic(Y=Y, R=R, mcmc=100, burnin=100, verbose=100, UL.Normal = UL.Normal,#
                                  v0=10, v1=K[[3]]*2)#
        V <- attr(test.run, "V")#
        sigma.mu = mean(apply(V, 2, mean))#
        sigma.var = 10*mean(apply(V, 2, var))#
        if(is.null(v0)) v0 <- 4 + 2 * (sigma.mu^2/sigma.var)#
        if(is.null(v1)) v1 <- 2 * sigma.mu * (v0/2 - 1)#
    }
## model fit#
    break0 <- NetworkStatic(Y, R=2, mcmc=mcmc,#
                          burnin=mcmc, verbose=mcmc, v0=v0, v1=v1,#
                          Waic=TRUE, marginal=TRUE)#
#
    break.out <- as.list(rep(NA, break.upper))#
    for(m in 1:break.upper){#
        ## to save time and to be more conservative, use randomly generated initial states#
        initial.s <- sort(rep(1:(m+1), length=time))#
        break.out[[m]] <- NetworkChange(Y, R=2, m=m, mcmc=mcmc, initial.s = initial.s,#
                                        burnin=mcmc, verbose=mcmc, v0=v0, v1=v1,#
                                        Waic=TRUE, marginal=TRUE)#
    }#
    out <- c(break0, break.out)
## diagnostic info#
    Waic.holder <- marginal.holder <- loglike.holder <- rep(NA, 4)#
    for(i in 1:(break.upper+1)){#
        loglike.holder[i] <- attr(out[[i]], "loglike")#
        marginal.holder[i] <- attr(out[[i]], "logmarglike")#
        Waic.holder[i] <- attr(out[[i]], "Waic.out")[1]#
    }#
    ## loss#
    loss.input <- break.out#
    loss.out <- BreakPointLoss(loss.input, display=FALSE)[[1]]
getwd()
## ---------------------------------------------------- ###
## ---------------------------------------------------- ###
## The idea is to compute the average loss of sampled states from the expected break points#
## by JHP "Fri Jul 20 09:57:45 2018"#
## ---------------------------------------------------- ###
## ---------------------------------------------------- ###
#
mse <- function(x, mu){mean((x - mu)^2)}#
#
trace.break <- function(tau.samp, tau){#
  m <- length(tau)#
  ## par(mfrow=c(1, m))#
  if(m>1){#
    ## for(i in 1:m){#
    ##   plot(tau.samp[i,], type="l"); abline(h=tau[i], col="red")#
    ## }#
    out <- sapply(1:m, function(i){mse(tau.samp[i,], tau[i])})#
  }else{#
    ## plot(tau.samp, type="l"); abline(h=tau, col="red")#
    out <- mse(tau.samp, tau)#
  }#
  return(out)#
}#
findBreakPoint <- function (mcmcout, start = 1) #
{#
    out <- attr(mcmcout, "prob.state")#
    ## y <- attr(mcmcout, "y")#
    m <- attr(mcmcout, "m")#
    out[1,] <- c(1, rep(0, m))#
   ## if (!is.ts(y)) #
    ##     y <- ts(y, start)#
    ## time.frame <- as.vector(time(y))#
    if (m == 1) {#
        pr.st <- c(0, diff(out[, (m + 1)]))#
        pr.st[pr.st < 0] <- 0#
        cp <- which(cumsum(pr.st) > 0.5)[1] - 1#
    }else {#
        cp <- rep(NA, m)#
        for (i in 2:m) {#
            pr.st <- c(0, diff(out[, i]))#
            pr.st <- ifelse(pr.st < 0, 0, pr.st)#
            cp[i - 1] <- which(cumsum(pr.st) > 0.5)[1] - 1#
        }#
        pr.st <- c(0, diff(out[, (m + 1)]))#
        pr.st[pr.st < 0] <- 0#
        cp[m] <- which(cumsum(pr.st) > 0.5)[1] - 1#
    }#
    ## cp.means <- rep(NA, m + 1)#
    ## cp.start <- c(1, cp + 1)#
    ## cp.end <- c(cp, length(y))#
    return(cp + 1)#
}#
#' Compute the Average Loss of Hidden State Changes from Expected Break Points#
#'#
#'#
#' @param ... MCMC output objects. These have to be of class#
#'   \code{mcmc} and have a \code{logmarglike} attribute. In what#
#'   follows, we let \code{M} denote the total number of models to be#
#'   compared.#
#'#
#' @param marginal If \code{marginal} is TRUE, \code{logmarglike} will be reported.#
#'#
#' @param display If \code{display} is TRUE, a plot of \code{ave.loss} will be produced. #
#' #
#' \code{BreakPointLoss}. ave.loss, logmarglike, State, Tau, Tau.samp#
#' @return \code{BreakPointLoss} returns five objects. They are: \code{ave.loss} the expected loss for each model#
#'   computed by the mean sqaured distance of hidden state changes from the expected break points#
#' \textrm{Average Loss} = \frac{1}{M}\sum_{m=1}^{M}\left(\frac{1}{G}\sum_{g=1}^{G} (\bar{\tau}_m - \tau_{m}^{(g)})^2 \right);#
#'   \code{logmarglike} the natural log of the marginal likelihood for each model; \code{State} sampled state vectors;#
#'   \code{Tau} expected break points for each model; and \code{Tau.samp} sampled break points from hidden state draws.#
#'#
#' @export#
#'#
#'#
#' @examples#
#'    \dontrun{#
#'    set.seed(1973)#
#'    ## Generate an array (30 by 30 by 40) with block transitions#
#'    from 2 blocks to 3 blocks#
#'    Y <- MakeBlockNetworkChange(n=10, T=40, type ="split")#
#'    G <- 100 ## Small mcmc scans to save time#
#' #
#'    ## Fit multiple models for break number detection using Bayesian model comparison#
#'    out0 <- NetworkStatic(Y, R=2, mcmc=G, burnin=G, verbose=G, Waic=TRUE)#
#'    out1 <- NetworkChange(Y, R=2, m=1, mcmc=G, burnin=G, verbose=G, Waic=TRUE)#
#'    out2 <- NetworkChange(Y, R=2, m=2, mcmc=G, burnin=G, verbose=G, Waic=TRUE)#
#'    out3 <- NetworkChange(Y, R=2, m=3, mcmc=G, burnin=G, verbose=G, Waic=TRUE)#
#'#
#'    ## The most probable model given break number 0 to 3 and data is out1 according to WAIC #
#'    out <- BreakPointLoss(out0, out1, out2, out3, waic=TRUE)#
#'#
#'    print(out[["ave.loss"]])#
#' }#
#'#
#' #
BreakPointLoss <- function(model.list, waic=FALSE, display=TRUE){#
#
    ## model.list <- list(...)#
    M <- length(model.list)#
    ## this.call <- match.call()#
    ## this.call.string <- deparse(this.call)#
    ## this.call.string <- strsplit(this.call.string, "BreakPointLoss\\(")#
    ## this.call.string <- this.call.string[[1]][length(this.call.string[[1]])]#
    ## this.call.string <- strsplit(this.call.string, ",")#
#
    break.number <- rep(NA, M)#
    for (i in 1:M) {#
        break.number[i] <- attr(model.list[[i]], "m")#
        ## print(break.number[i])#
        if(break.number[i] < 1){#
            stop("no break model must be dropped\n")#
        }#
    }#
#
    model.names <- paste0("break ", break.number)## c(model.names, this.call.string[[1]][i])#
#
    ## If marginal, report marginal likelihood#
    WAIC <-  NULL#
    if(waic){#
        WAIC <- WaicCompare(model.list)#
    }#
    State <- Tau <- Tau.samp <- as.list(rep(NA, M))#
#
    for (i in 1:M) {#
        State[[i]] <- attr(model.list[[i]], "Smat")#
        Tau[[i]] <- findBreakPoint(model.list[[i]])#
        Tau.samp[[i]] <- sapply(1:nrow(State[[i]]), function(j){which(diff(State[[i]][j,])==1)+1})#
    }#
    ## Report Average Loss#
    ave.loss <- rep(NA, M)#
    for (i in 1:M) {#
        ave.loss[i] <- mean(trace.break(Tau.samp[[i]], Tau[[i]]))#
    }#
#
    if(display){#
        plot(ave.loss, type="o", xlab="Model", ylab="Loss", main="Average Loss", #
             axes=FALSE)#
        axis(1, at=break.number, labels=model.names); axis(2)#
        abline(v = which.min(ave.loss), lty=3, col="red")#
    }#
    return(list(ave.loss = ave.loss, WAIC=WAIC, State=State, Tau=Tau, Tau.samp=Tau.samp))#
}
## diagnostic info#
    Waic.holder <- marginal.holder <- loglike.holder <- rep(NA, 4)#
    for(i in 1:(break.upper+1)){#
        loglike.holder[i] <- attr(out[[i]], "loglike")#
        marginal.holder[i] <- attr(out[[i]], "logmarglike")#
        Waic.holder[i] <- attr(out[[i]], "Waic.out")[1]#
    }#
    ## loss#
    loss.input <- break.out#
    loss.out <- BreakPointLoss(loss.input, display=FALSE)[[1]]
attr(out[[i]], "loglike")
attr(out[[1]], "loglike")
attr(out[[2]], "loglike")
attr(break.out, "loglike")
attr(break0, "loglike")
attr(break.out[[1]], "loglike")
out <- as.list(rep(NA, break.upper))
out[[1]] <- break0
out[[2]] <- break.out[[1]]
out[[3]] <- break.out[[2]]
out[[4]] <- break.out[[3]]
## diagnostic info#
    Waic.holder <- marginal.holder <- loglike.holder <- rep(NA, 4)#
    for(i in 1:(break.upper+1)){#
        loglike.holder[i] <- attr(out[[i]], "loglike")#
        marginal.holder[i] <- attr(out[[i]], "logmarglike")#
        Waic.holder[i] <- attr(out[[i]], "Waic.out")[1]#
    }
Waic.holder
loss.input <- out[[-1]]#
    loss.out <- BreakPointLoss(loss.input, display=FALSE)[[1]]
loss.out
length(loss.input)
loss.input <- out[[2:(break.upper+1)]]
loss.input <- out[[-1]]
rm(loss.input)
loss.input <- out[[-1]]
typeof(out)
loss.input <- out[[-c(1)]]
loss.input <- out[-1]#
    loss.out <- BreakPointLoss(loss.input, display=FALSE)[[1]]
loss.out
## save model diagnostics#
    result <- list(marginal.holder, loglike.holder, Waic.holder, loss.out)#
#
    test.curve1 <- simulation.result[[1]]#
    test.curve2 <- simulation.result[[2]]#
    test.curve3 <- simulation.result[[3]]#
    test.curve4 <- simulation.result[[4]]
test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
    test.curve <- data.frame(test.curve)#
    colnames(test.curve) <- paste0("break", 0:break.upper)#
    test.curve$test <- c("LogMarginal", "Loglike", "WAIC","Loss")#
    data_long <- gather(test.curve, model, value, #
                        colnames(test.curve), factor_key=TRUE)
test.curve4
simulation.result[[4]]
result
## save model diagnostics#
    result <- list(marginal.holder, loglike.holder, Waic.holder, loss.out)#
#
    test.curve1 <- result[[1]]#
    test.curve2 <- result[[2]]#
    test.curve3 <- result[[3]]#
    test.curve4 <- result[[4]]#
#
    test.curve <- rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))#
    test.curve <- data.frame(test.curve)#
    colnames(test.curve) <- paste0("break", 0:break.upper)#
    test.curve$test <- c("LogMarginal", "Loglike", "WAIC","Loss")#
    data_long <- gather(test.curve, model, value, #
                        colnames(test.curve), factor_key=TRUE)
test.curve
test.curve1
rbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))
cbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))
test.curve1
test.curve1 <- matrix(result[[1]])#
    test.curve2 <- matrix(result[[2]])#
    test.curve3 <- matrix(result[[3]])#
    test.curve4 <- matrix(result[[4]])#
#
    test.curve <- cbind(test.curve1, test.curve2, test.curve3, cbind(NA, test.curve4))
test.curve
test.curve1
test.curve2
test.curve3
test.curve4
cbind(NA, test.curve4)
matrix(result[[1]], byrow=TRUE)
matrix(result[[1]], 1, break.upper +1, byrow=TRUE)
test.curve1 <- matrix(result[[1]], 1, break.upper +1, byrow=TRUE)#
    test.curve2 <- matrix(result[[2]], 1, break.upper +1, byrow=TRUE)#
    test.curve3 <- matrix(result[[3]], 1, break.upper +1, byrow=TRUE)#
    test.curve4 <- matrix(c(NA, result[[4]]), 1, break.upper +1, byrow=TRUE)#
#
    test.curve <- rbind(test.curve1, test.curve2, test.curve3, test.curve4)
test.curve
test.curve <- data.frame(test.curve)#
    colnames(test.curve) <- paste0("break", 0:break.upper)#
    test.curve$test <- c("LogMarginal", "Loglike", "WAIC","Loss")#
    data_long <- gather(test.curve, model, value, #
                        colnames(test.curve), factor_key=TRUE)
data_long
test.curve <- rbind(test.curve1, test.curve2, test.curve3, test.curve4)#
    test.curve <- data.frame(test.curve)#
    colnames(test.curve) <- paste0("break", 0:break.upper)
test.curve
test.curve$test <- c("LogMarginal", "Loglike", "WAIC","Loss")
test.curve
gather(test.curve, model, value, #
                        colnames(test.curve), factor_key=TRUE)
data_long <- gather(test.curve, model, value, #
                        paste0("break", 0:break.upper), factor_key=TRUE)
data_long
g1 <- ggplot(data= data_long, mapping = aes(x = model, y = value, group = test, color = test)) +#
        geom_line() + geom_point() + facet_wrap(~test, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1
test.curve1 <- -2*matrix(result[[1]], 1, break.upper +1, byrow=TRUE)#
    test.curve2 <- -2*matrix(result[[2]], 1, break.upper +1, byrow=TRUE)#
    test.curve3 <- matrix(result[[3]], 1, break.upper +1, byrow=TRUE)#
    test.curve4 <- matrix(c(NA, result[[4]]), 1, break.upper +1, byrow=TRUE)#
#
    test.curve <- rbind(test.curve1, test.curve2, test.curve3, test.curve4)#
    test.curve <- data.frame(test.curve)#
    colnames(test.curve) <- paste0("break", 0:break.upper)#
    test.curve$test <- c("-2*LogMarginal", "-2*Loglike", "WAIC","Loss")#
    data_long <- gather(test.curve, model, value, #
                        paste0("break", 0:break.upper), factor_key=TRUE)#
#
    g1 <- ggplot(data= data_long, mapping = aes(x = model, y = value, group = test, color = test)) +#
        geom_line() + geom_point() + facet_wrap(~test, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1
test.curve <- rbind(test.curve1, test.curve2, test.curve3, test.curve4)#
    test.curve <- data.frame(test.curve)#
    colnames(test.curve) <- paste0("break", 0:break.upper)#
    test.curve$Metric <- c("-2*LogMarginal", "-2*Loglike", "WAIC","Loss")#
    data_long <- gather(test.curve, model, value, #
                        paste0("break", 0:break.upper), factor_key=TRUE)#
#
    g1 <- ggplot(data= data_long, mapping = aes(x = model, y = value, group = test, color = test)) +#
        geom_line() + geom_point() + facet_wrap(~test, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line() + geom_point() + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line() + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1
test.curve <- rbind(test.curve1, test.curve2, test.curve3, test.curve4)#
    test.curve <- data.frame(test.curve)#
    colnames(test.curve) <- paste0("break", 0:break.upper)#
    test.curve$Metric <- c("-2*LogMarginal", "-2*Loglike", "WAIC","Average Loss")#
    data_long <- gather(test.curve, model, value, #
                        paste0("break", 0:break.upper), factor_key=TRUE)#
#
    g1 <- ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line() + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line(lwd=0.5) + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1
g1 <- ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line(size=0.5) + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1
ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line(size=0.01) + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line(size=0.1) + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line(size=0.4) + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line(size=0.3) + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line(size=0.2) + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1 <- ggplot(data= data_long, mapping = aes(x = model, y = value, group = Metric, color = Metric)) +#
        geom_line(size=0.2) + geom_point(cex=3, alpha=1/2) + facet_wrap(~Metric, nrow=1, ncol=4, scales = "free_y") + #
        labs(x = "Model", y = "Value") + theme_bw() +#
        theme(legend.key = element_blank(),#
              plot.title = element_text(hjust = 0.5))
g1
load("/Users/park/GitHub/BridgeChange/small_signal_loss.RData")
ls()
simulation.result
abind
require(NetworkChange)
abind
require(abind)
abind
require(NetworkChange)
ls()
data(MajorAlly)
ls()
apply(Y, 1:2, sum)
load("/Users/park/GitHub/NetworkChange/data/MajorAlly.rda")
apply(Y, 1:2, sum)
setwd("~/GitHub/NetworkChange/")
devtools::document()
Y <- MakeBlockNetworkChange(n=10, T=40, type ="split")
G <- 100 ## Small mcmc scans to save time
out1 <- NetworkChange(Y, R=2, m=1, mcmc=G, burnin=G, verbose=G, Waic=TRUE)
out2 <- NetworkChange(Y, R=2, m=2, mcmc=G, burnin=G, verbose=G, Waic=TRUE)
model.list <- list(out1, out2)
waic=TRUE
display=TRUE
M <- length(model.list)#
    ## this.call <- match.call()#
    ## this.call.string <- deparse(this.call)#
    ## this.call.string <- strsplit(this.call.string, "BreakPointLoss\\(")#
    ## this.call.string <- this.call.string[[1]][length(this.call.string[[1]])]#
    ## this.call.string <- strsplit(this.call.string, ",")#
#
    break.number <- rep(NA, M)#
    for (i in 1:M) {#
        break.number[i] <- attr(model.list[[i]], "m")#
        ## print(break.number[i])#
        if(break.number[i] < 1){#
            stop("no break model must be dropped\n")#
        }#
    }#
#
    model.names <- paste0("break ", break.number)## c(model.names, this.call.string[[1]][i])
## If marginal, report marginal likelihood#
    WAIC <-  NULL#
    if(waic){#
        WAIC <- WaicCompare(model.list)#
    }#
    State <- Tau <- Tau.samp <- as.list(rep(NA, M))#
#
    for (i in 1:M) {#
        State[[i]] <- attr(model.list[[i]], "Smat")#
        Tau[[i]] <- findBreakPoint(model.list[[i]])#
        Tau.samp[[i]] <- sapply(1:nrow(State[[i]]), function(j){which(diff(State[[i]][j,])==1)+1})#
    }#
    ## Report Average Loss#
    ave.loss <- rep(NA, M)#
    for (i in 1:M) {#
        ave.loss[i] <- mean(trace.break(Tau.samp[[i]], Tau[[i]]))#
    }
ave.loss
i=1
trace.break(Tau.samp[[i]], Tau[[i]])
i=2
trace.break(Tau.samp[[i]], Tau[[i]])
Tau
Tau.samp[[1]]
Tau.samp[[2]]
Tau.samp[[2]]
Tau.samp[[2]][1,]
Tau[[2]]
Tau.samp[[2]][1,] - 19
sum((Tau.samp[[2]][1,] - 19)^2)
sum((Tau.samp[[2]][1,] - 19)^2)/100
sqrt(sum((Tau.samp[[2]][1,] - 19)^2)/100)
mean(trace.break(Tau.samp[[i]], Tau[[i]]))
i
i = 1
mean(trace.break(Tau.samp[[i]], Tau[[i]]))
sqrt(0.2)
2*sqrt(0.2)
2*sqrt(0.1)
2*sqrt(2)
-6796*2
-6405*2
-6393*2
-6369*2
-6787*2
-6662*2
-6446*2
-6428*2
-7204*2
-7229*2
7155*2
-7191*2
-6357*2
-6403*2
-6683*2
-6796*2
-6349*2
-6420*2
-6414*2
sqrt(0.08)
sqrt(0.08)*2
sqrt(0.55)*2
sqrt(0.49)*2
sqrt(0.18)*2
